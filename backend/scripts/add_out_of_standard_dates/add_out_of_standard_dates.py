"""
Warning: the csv is generated by CSV because it seems the logic for being standard
changes frequently and doesn't even always follow the same logic. For now this is fine,
but it is probably not 100% right.

TODO: convert the CSV to a sql file to just run on the db directly
"""

import csv

import psycopg2

conn = psycopg2.connect(
    database="postgres",
    host="localhost",
    user="postgres",
    password="db_pass",
    port="5432",
)

cursor = conn.cursor()

# this index just needs to happen
cursor.execute(
    """
    CREATE INDEX IF NOT EXISTS code_index ON sets(code);
    """
)

cursor.execute(
    """
    ALTER TABLE sets ADD COLUMN IF NOT EXISTS laststandarddate TEXT;
    
    ALTER TABLE sets ALTER COLUMN laststandarddate SET DEFAULT '1900-01-01';
    """
)
with open("mtg_standard_set_rotations.csv", "r") as set_file:
    mtg_set_csv = csv.reader(set_file)
    next(mtg_set_csv)

    max_release_date = "1900-01-01"
    min_release_date = "3000-01-01"
    for row in mtg_set_csv:
        if row[1].split("-")[0] < "2011":
            # these old records get kind of dicey with the input chatgpt
            continue
        if row[1] > max_release_date:
            max_release_date = row[1]
        # seems chatgpt and the other dataset are not 100% matching release date (probably chatgpts fault)
        cursor.execute(
            """
            SELECT id FROM sets
            WHERE LOWER(name)=LOWER(%s)
            AND releasedate::timestamp between (%s::timestamp - INTERVAL '1 month') AND (%s::timestamp + INTERVAL '1 month')
            """,
            [row[0], row[1], row[1]],
        )
        found_record = cursor.fetchone()
        if found_record:
            if row[2].startswith("Still in Standard"):
                cursor.execute(
                    """
                    UPDATE sets SET laststandarddate = '3000-01-01' WHERE id = %s
                    """,
                    [found_record[0]],
                )
                conn.commit()
            else:
                cursor.execute(
                    """
                    UPDATE sets SET laststandarddate = %s WHERE id = %s
                    """,
                    [row[2], found_record[0]],
                )
                conn.commit()
        else:
            raise ValueError(f"Not matching this record: {row}")
        # set everything higher than the max to null to we know it's the current set
        cursor.execute(
            """
            UPDATE sets SET laststandarddate = NULL WHERE releasedate::timestamp > %s::timestamp
            """,
            [max_release_date],
        )
        conn.commit()

conn.close()
